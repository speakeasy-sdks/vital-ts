/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The provider of this connected source.
 */
export class Provider extends SpeakeasyBase {
    /**
     * URL for source logo
     */
    @SpeakeasyMetadata()
    @Expose({ name: "logo" })
    logo: string;

    /**
     * Name of source of information
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    /**
     * Slug for designated source
     */
    @SpeakeasyMetadata()
    @Expose({ name: "slug" })
    slug: string;
}

/**
 * A vendor, a service, or a platform which Vital can connect with.
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export class ConnectedSourceClientFacingSource extends SpeakeasyBase {
    /**
     * URL for source logo
     */
    @SpeakeasyMetadata()
    @Expose({ name: "logo" })
    logo: string;

    /**
     * Name of source of information
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    /**
     * Slug for designated source
     */
    @SpeakeasyMetadata()
    @Expose({ name: "slug" })
    slug: string;
}

export class ConnectedSourceClientFacing extends SpeakeasyBase {
    /**
     * When your item is created
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_on" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdOn: Date;

    /**
     * The provider of this connected source.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "provider" })
    @Type(() => Provider)
    provider: Provider;

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "source" })
    @Type(() => ConnectedSourceClientFacingSource)
    source: ConnectedSourceClientFacingSource;
}
