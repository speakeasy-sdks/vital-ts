/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ClientFacingLab } from "./clientfacinglab";
import { ClientFacingMarker } from "./clientfacingmarker";
import { ClientFacingOrderEvent } from "./clientfacingorderevent";
import { LabTestCollectionMethod } from "./labtestcollectionmethod";
import { LabTestSampleType } from "./labtestsampletype";
import { OrderTopLevelStatus } from "./ordertoplevelstatus";
import { PhysicianClientFacing } from "./physicianclientfacing";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The Vital Test associated with the order
 */
export class ClientFacingOrderClientFacingLabTest extends SpeakeasyBase {
    /**
     * Defines whether a lab test requires fasting. Only available for Labcorp.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "fasting" })
    fasting?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    @SpeakeasyMetadata()
    @Expose({ name: "is_active" })
    isActive: boolean;

    /**
     * Denotes whether a lab test requires using non-Vital physician networks. If it does then it's delegated - no otherwise.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "is_delegated" })
    isDelegated?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "lab" })
    @Type(() => ClientFacingLab)
    lab?: ClientFacingLab;

    @SpeakeasyMetadata({ elemType: ClientFacingMarker })
    @Expose({ name: "markers" })
    @Type(() => ClientFacingMarker)
    markers?: ClientFacingMarker[];

    /**
     * The method used to perform a lab test.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "method" })
    method: LabTestCollectionMethod;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    @SpeakeasyMetadata()
    @Expose({ name: "price" })
    price: number;

    /**
     * The type of sample used to perform a lab test.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "sample_type" })
    sampleType: LabTestSampleType;

    @SpeakeasyMetadata()
    @Expose({ name: "slug" })
    slug: string;
}

/**
 * Patient Address
 */
export class ClientFacingOrderPatientAddressCompatible extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "city" })
    city: string;

    @SpeakeasyMetadata()
    @Expose({ name: "country" })
    country: string;

    @SpeakeasyMetadata()
    @Expose({ name: "phone_number" })
    phoneNumber?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "receiver_name" })
    receiverName?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "state" })
    state: string;

    @SpeakeasyMetadata()
    @Expose({ name: "street" })
    street: string;

    @SpeakeasyMetadata()
    @Expose({ name: "street_number" })
    streetNumber?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "zip" })
    zip: string;
}

/**
 * Patient Details
 */
export class ClientFacingOrderClientFacingPatientDetailsCompatible extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "dob" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    dob: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "email" })
    email?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "first_name" })
    firstName?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "gender" })
    gender: string;

    @SpeakeasyMetadata()
    @Expose({ name: "last_name" })
    lastName?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "phone_number" })
    phoneNumber?: string;
}

/**
 * Shipping Details. For unregistered testkit orders.
 */
export class ClientFacingOrderShippingAddress extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "city" })
    city: string;

    @SpeakeasyMetadata()
    @Expose({ name: "country" })
    country: string;

    @SpeakeasyMetadata()
    @Expose({ name: "first_line" })
    firstLine: string;

    @SpeakeasyMetadata()
    @Expose({ name: "phone_number" })
    phoneNumber: string;

    @SpeakeasyMetadata()
    @Expose({ name: "receiver_name" })
    receiverName: string;

    @SpeakeasyMetadata()
    @Expose({ name: "second_line" })
    secondLine?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "state" })
    state: string;

    @SpeakeasyMetadata()
    @Expose({ name: "zip" })
    zip: string;
}

export class ClientFacingOrder extends SpeakeasyBase {
    /**
     * When your order was created
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "details" })
    details: any;

    @SpeakeasyMetadata({ elemType: ClientFacingOrderEvent })
    @Expose({ name: "events" })
    @Type(() => ClientFacingOrderEvent)
    events: ClientFacingOrderEvent[];

    /**
     * Vital ID of the health insurance.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "health_insurance_id" })
    healthInsuranceId?: string;

    /**
     * The Vital Order ID
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * The Vital Test associated with the order
     */
    @SpeakeasyMetadata()
    @Expose({ name: "lab_test" })
    @Type(() => ClientFacingOrderClientFacingLabTest)
    labTest: ClientFacingOrderClientFacingLabTest;

    /**
     * Notes associated with the order
     */
    @SpeakeasyMetadata()
    @Expose({ name: "notes" })
    notes?: string;

    /**
     * Patient Address
     */
    @SpeakeasyMetadata()
    @Expose({ name: "patient_address" })
    @Type(() => ClientFacingOrderPatientAddressCompatible)
    patientAddress?: ClientFacingOrderPatientAddressCompatible;

    /**
     * Patient Details
     */
    @SpeakeasyMetadata()
    @Expose({ name: "patient_details" })
    @Type(() => ClientFacingOrderClientFacingPatientDetailsCompatible)
    patientDetails?: ClientFacingOrderClientFacingPatientDetailsCompatible;

    @SpeakeasyMetadata()
    @Expose({ name: "physician" })
    @Type(() => PhysicianClientFacing)
    physician?: PhysicianClientFacing;

    /**
     * Defines whether order is priority or not. Only available for Labcorp. For Labcorp, this corresponds to a STAT order.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "priority" })
    priority?: boolean;

    /**
     * DEPRECATED. Requistion form url.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "requisition_form_url" })
    requisitionFormUrl?: string;

    /**
     * Sample ID
     */
    @SpeakeasyMetadata()
    @Expose({ name: "sample_id" })
    sampleId?: string;

    /**
     * Shipping Details. For unregistered testkit orders.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "shipping_details" })
    @Type(() => ClientFacingOrderShippingAddress)
    shippingDetails?: ClientFacingOrderShippingAddress;

    /**
     * An enumeration.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status?: OrderTopLevelStatus;

    /**
     * Your team id.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "team_id" })
    teamId: string;

    /**
     * When your order was last updated.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "updated_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt: Date;

    /**
     * User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "user_id" })
    userId: string;
}
